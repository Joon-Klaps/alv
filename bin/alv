#!/usr/bin/env python

import alv
import argparse

from alv.version import __version__
from alv.alignmentterminal import AlignmentTerminal
from alv.io import read_alignment
#from alv.colorize import print_one_sequence_block


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('infile')
    ap.add_argument('--version', action='version', version='%(prog)s ' + __version__)
    ap.add_argument('-f', '--format', choices=['fasta', 'clustal', 'phylip', 'stockholm'], default='fasta',
                    help="Specify what sequence type to assume.")
    ap.add_argument('-t', '--type', choices=['aa', 'dna', 'rna', 'codon', 'guess'], default='guess',
                    help="Specify what sequence type to assume. Coding DNA/RNA is assumed with the 'codon' option. Guessing the format only chooses between 'aa' and 'dna'.")
    ap.add_argument('-c', '--color-scheme', choices=['clustal', 'taylor', 'hydrophobicity'], default='clustal',
                    help='Color scheme for AA and coding DNA/RNA. The clustal coloring scheme is an approximation of the original, due to the limited color choices for consoles. The "hydrophobicity" gives red to hydrophobic, blue to polar, and green to charged residues.')
    ap.add_argument('-w', '--width', type=int, default=0,
                    help='Width of alignment blocks. Defaults to terminal width minus accession width, essentially.')
    ap.add_argument('-k', '--keep-colors-when-redirecting', action='store_true',
                    help="Do not strip colors when redirecting to stdout, or similar. In particular useful with the command 'less -R'.")
    ordering_args = ap.add_argument_group('Sequence ordering')
    ordering_args.add_argument('-s', '--sorting', choices=['infile', 'alpha'], default='infile',
                    help="Sort the sequences as given in the infile or alphabetically (by accession).")
    ordering_args.add_argument('-si', '--sort-by-id', metavar='ACCESSION', type=str,
                    help='Sort the output alignment by similarity (percent identity) to named sequence. Overrides -s.')
    ordering_args.add_argument('-so', '--sorting_order', metavar='ACCESSIONS', type=str,
                    help='Comma-separated list of accessions. Sequences will be presented in this order. Also note that one can choose which sequences to present with this opion. Overrides -s and -si.')

    restriction_args = ap.add_argument_group('Restricting colorization')
    restriction_args.add_argument('--majority', action='store_true',
                                  help='Only color those column where the most common amino acid is found in 50 percent of sequences.')
    restriction_args.add_argument('--no_indels', action='store_true',
                                  help='Only color column without indels.')
    
#    ap.add_argument('-p', '--prefix', type=int, default=0, help='Number of characters to remove from the beggining of the accession. Note: PHYLIP format allows max 10 character accessions.')
    args = ap.parse_args()

    alignment, painter = read_alignment(args.infile, args)

    terminal = AlignmentTerminal(args)
    terminal.output_alignment(alignment, painter, args)
    

if __name__ == '__main__':
    main()
    

