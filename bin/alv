#!/usr/bin/env python

import alv
import argparse

from alv.version import __version__
from alv.alignmentterminal import AlignmentTerminal
from alv.io import read_alignment
#from alv.colorize import print_one_sequence_block


def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('infile')
    ap.add_argument('-c', '--color-scheme', choices=['clustal', 'zappo', 'taylor', 'hydrophobicity'], default='clustal', help='Color scheme for AA and coding DNA/RNA. The clustal coloring scheme is an approximation of the original, due to the limited color choices for consoles.')
    ap.add_argument('-f', '--format', choices=['fasta', 'clustal', 'phylip', 'stockholm', 'macse'], default='fasta', help="Specify what sequence type to assume. With the 'macse' option (which refers to MACSE alignment software), coding DNA/RNA sequences in FASTA format are assumed, and frameshifts are assumed to be indicated with exclamation points. For the other formats, you may want to suggest a sequence type (see the '-t' option).")
    ap.add_argument('-k', '--keep-colors-when-redirecting', action='store_true', help='Do not strip colors when redirecting to stdout, or similar.')
    ap.add_argument('-t', '--type', choices=['aa', 'dna', 'rna', 'codon', 'guess'], default='guess', help="Specify what sequence type to assume. Coding DNA/RNA is assumed with the 'codon' option. Guessing the format only chooses between 'aa' and 'dna'.")
    ap.add_argument('--version', action='version', version='%(prog)s ' + __version__)
    ap.add_argument('-w', '--width', type=int, default=0, help='Width of alignment blocks. Defaults to terminal width minus accession width, essentially.')
#    ap.add_argument('-p', '--prefix', type=int, default=0, help='Number of characters to remove from the beggining of the accession. Note: PHYLIP format allows max 10 character accessions.')
    args = ap.parse_args()

    alignment, painter = read_alignment(args.infile, args)

    terminal = AlignmentTerminal()
    terminal.output_alignment(alignment, painter, args)
    

if __name__ == '__main__':
    main()
    

